library(caret)
install.packages("caret")
a = 1
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("caret")
library(caret)
library(caret)
install.packages("ModelMetrics")
install.packages("caret")
libraby(caret)
install.packages("ModelMetrics")
library(caret)
library(caret)
install.packages("caret")
install.packages("caret")
caret
install.packages('caret', dependencies = TRUE)
# Repeat task 8 for bath number vs prices
ggplot(data=mydata,aes(as.character(baths),y=price))+geom_boxplot()
# Repeat task 8 for bath number vs prices
ggplot(data=mydata,aes(as.character(baths),y=price))+geom_boxplot()
library(caret)
library(caret)
install.packages("caret")
install.packages"ModelMetrics",dependencies=TRUE)
import.packages("cgdsr")
install.packages("cgdsr")
library(cgdsr)
mycgda = CGDS("http://www.cbioportal.org/public-portal/")
test(mycgds)
mycgds = CGDS("http://www.cbioportal.org/public-portal/")
test(mycgds)
getClinicalData(mycgds)
mycancerstudy = getCancerStudies(mycgds)[2,1]
mycaselist = getCaseLists(mycgds,mycancerstudy)[1,1]
mygeneticprofile = getGeneticProfiles(mycgds,mycancerstudy)[4,1]
mygeneticprofile = getGeneticProfiles(mycgds,mycancerstudy)
View(mygeneticprofile)
mygeneticprofile = getGeneticProfiles(mycgds,mycancerstudy)[1,4]
mygeneticprofile = getGeneticProfiles(mycgds,mycancerstudy)
View(mygeneticprofile)
help('cdgsr')
help('CGDS')
mycancerstudy = getCancerStudies(mycgds)[2,1]
mycancerstudy = getCancerStudies(mycgds)
View(mycancerstudy)
cancerStudies = getCancerStudies(mycgds)
interestedCancerStudies = cancerStudies[1:4,]
View(interestedCancerStudies)
View(cancerStudies)
setwd('~/Projects/personal/data-science-101')
realEstate = read.csv("realEstate.csv")
realEstate = read.csv("realEstate.csv")
realEstate = read.csv("realEstate.csv")
install.packages("caret")
library(caret)
install.packages("ModelMetrics")
install.packages("pbkrtest")
install.packages("ModelMetrics")
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages('caret', repos='http://cran.rstudio.com/')
install.packages("ModelMetrics", dependencies = TRUE)
install.packages("ModelMetrics", dependencies = TRUE)
install.packages("ModelMetrics", dependencies = TRUE)
install.packages("caret", dependencies = TRUE
)
library(caret)
library(caret)
View(realEstate)
View(realEstate)
# Build a linear regression model in order to predict the price of houses from square feet
dataset = realEstate[,c("sq__ft","price")]
View(dataset)
ggplot(dataset,aes(price,sq__ft))+ geom_point()+geom_smooth(se= FALSE)
model <- train(price ~.,data=dataset,method="lm")
View(model)
model
model
model$finalModel
View(dataset)
# Split the data to half and repeat task 2 on the training set.
split(realEstate, sample(rep(1:2, 13)))
# Split the data to half and repeat task 2 on the training set.
split(dataset, sample(rep(1:2, 13)))
(rep(1:2, 13)
)
split(dataset, sample(1:2, nrow(dataset), replace=T))
# Split the data to half and repeat task 2 on the training set.
split(dataset, sample(1:2, nrow(dataset), replace=T))[1]
ggploe(trainingData,aes(price,sq__ft)+geom_point() + geom_smooth(se=FALSE))
ggplot(trainingData,aes(price,sq__ft)+geom_point() + geom_smooth(se=FALSE))
trainingData = splitData[1]
ggplot(trainingData,aes(price,sq__ft)+geom_point() + geom_smooth(se=FALSE))
trainingData = splitData[1]
# Split the data to half and repeat task 2 on the training set.
splitData = split(dataset, sample(1:2, nrow(dataset), replace=T))[1]
trainingData = splitData[1]
testingData = splitData[2]
ggplot(trainingData,aes(price,sq__ft)+geom_point() + geom_smooth(se=FALSE))
ggplot(trainingData,aes(price,sq__ft))+geom_point() + geom_smooth(se=FALSE))
ggplot(trainingData,aes(price,sq__ft))+geom_point() + geom_smooth(se=FALSE)
View(trainingData)
trainingData = splitData[1][1]
ggplot(trainingData,aes(price,sq__ft))+geom_point() + geom_smooth(se=FALSE)
testingData = splitData[2][1]
ggplot(trainingData,aes(price,sq__ft))+geom_point() + geom_smooth(se=FALSE)
# Split the data to half and repeat task 2 on the training set.
splitData = split(dataset, sample(1:2, nrow(dataset), replace=T))[1]
# Split the data to half and repeat task 2 on the training set.
splitData = split(dataset, sample(1:2, nrow(dataset), replace=T))
trainingData = splitData[1][1]
testingData = splitData[2][1]
ggplot(trainingData,aes(price,sq__ft))+geom_point() + geom_smooth(se=FALSE)
trainingData = unlist(splitData[1])
testingData = unlist(splitData[2])
ggplot(trainingData,aes(price,sq__ft))+geom_point() + geom_smooth(se=FALSE)
do.call(rbind.data.frame, trainingData)
do.call(rbind.data.frame, splitData[1])
trainingData = do.call(rbind.data.frame, splitData[1])
ggplot(trainingData,aes(price,sq__ft))+geom_point() + geom_smooth(se=FALSE)
ggplot(trainingData,aes(price,sq__ft))+geom_point() + geom_smooth(se=FALSE)
testingData = do.call(rbing.data.frame, splitData[2])
testingData = do.call(rbind.data.frame, splitData[2])
ggplot(testingData,aes(price,sq__ft))+geom_point() +geom_smooth(se=FALSE)
modelSplit <- train(price ~.,data=trainingData,method="lm")
modelSplit
model$finalModel
modelSplit$finalModel
View(testingData)
51.41 * 1022 + 165692.98
modelSplit$finalModel
model$finalModel
predictedPrice = as.numeric(predict(modelSplit,trainingData))
predict(modelSplit,trainingData)
mean(abs(trainingData$price-predictedPrice))
RMSE(trainingData$price,predictedPrice)
mean(abs(testingData$price-predictedPrice)) # 96012.75
mean(abs(testingData$price-predictedPrice)) # 96012.75
predictedPrice= as.numeric(predict(modelSplit,testingData))
mean(abs(testingData$price-predictedPrice)) # 96012.75
RMSE(testingData$price,predictedPrice) #131066.5
# 5- Use “beds”, “baths” and “sq__ft” to predict “prices” using multiple linear regression. Train on the first half of the data and measure RMSE and R-Squared on
# the Test set. Compare results with task 4.
dataset = realEstate[,c('beds','baths','sq__ft')]
View(dataset)
ggplot(dataset,aes(price,sq__ft,color=beds))+ geom_point()+geom_smooth(se= FALSE)
ggplot(dataset,aes(price,sq__ft))+ geom_point()+geom_smooth(se= FALSE)
# 5- Use “beds”, “baths” and “sq__ft” to predict “prices” using multiple linear regression. Train on the first half of the data and measure RMSE and R-Squared on
# the Test set. Compare results with task 4.
dataset = realEstate[,c('beds','baths','sq__ft','price')]
ggplot(dataset,aes(price,sq__ft))+ geom_point()+geom_smooth(se= FALSE)
ggplot(dataset,aes(price,sq__ft,color=baths))+ geom_point()+geom_smooth(se= FALSE)
splitData = split(dataset, sample(1:2, nrow(dataset), replace=T))
trainintData = do.call(rbind.data.frame, splitData[1])
trainingData = do.call(rbind.data.frame, splitData[1])
testingData = do.call(rbind.data.frame, splitData[2])
modelBath <- train(price ~.,data=trainingData,method="mlm")
modelBath <- train(price ~.,data=trainingData,method="lm")
modelBath <- train(price ~.,data=trainingData,method="lm")
modelBath
modelBath$finalModel
predictedPrice = as.numeric(predict(modeBath,testingData))
predictedPrice = as.numeric(predict(modelBath,testingData))
mean(abs(testingData$price-predictedPrive))
mean(abs(testingData$price-predictedPrice))
RMSE(testingdata$price,predictedPrice)
RMSE(testingData$price,predictedPrice)
source('~/Projects/personal/data-science-101/week06.R')
realEstate = read.csv("realEstate.csv")
setwd('~/Projects/personal/data-science-101')
library(utils)
realEstate = read.csv("realEstate.csv")
# Step1: select the dataset for modeling
myData=realEstate[,c('beds','baths','sq__ft','price')]
# clean the data
myData=myData[-which(myData$sq__ft==0),]
# Step2: split to train and test
training=mydata[seq(q,nrow(myData),2)]
# Step2: split to train and test
training=mydata[seq(1,nrow(myData),2)]
testing=mydata[seq(2,nrow(myData),2)]
# Step2: split to train and test
training=myData[seq(1,nrow(myData),2)]
# Step2: split to train and test
myData[seq(1,nrow(myData),2)]
# Step2: split to train and test
training=myData[seq(1,nrow(myData),2),]
testing=myData[seq(2,nrow(myData),2),]
library(caret)
train?
?
a
?train
# Step3: train the model
model=train(price ~.,method='lm',data=training)
# Step4: test the model
predictedPrices=predict(model,testing)
#Step5: measure accuracy
#MAE
mean(abs(predictedPrices-testing$price))
#RMSE
RMSE(predictedPrices,testing$price)
#RMSE
RMSE(predictedPrices,testing$price)
R2(predictedPrices,testing$price)
# Step3: train the model
model=train(price ~.,method='rf',data=training)
# Step4: test the model
predictedPrices=predict(model,testing)
#Step5: measure accuracy
#MAE
mean(abs(predictedPrices-testing$price))
#RMSE
RMSE(predictedPrices,testing$price)
R2(predictedPrices,testing$price)
# Step3: train the model
model=train(price ~.,method='rf',data=training)
# Step3: train the model
model=train(price ~.,method='rf',data=training)
#Step5: measure accuracy
#MAE
mean(abs(predictedPrices-testing$price))
#RMSE
RMSE(predictedPrices,testing$price)
R2(predictedPrices,testing$price)
)
model=train(price ~.,method='rf',data=training)
# Step4: test the model
predictedPrices=predict(model,testing)
#Step5: measure accuracy
#MAE
mean(abs(predictedPrices-testing$price))
#RMSE
RMSE(predictedPrices,testing$price)
R2(predictedPrices,testing$price)
set.seed(14)
model=train(price ~.,method='rf',data=training)
# Step4: test the model
predictedPrices=predict(model,testing)
#Step5: measure accuracy
#MAE
mean(abs(predictedPrices-testing$price))
#RMSE
RMSE(predictedPrices,testing$price)
R2(predictedPrices,testing$price)
## Classification
iris = iris
ggplot(iris,aes(Sepal.Length,Petal.Length,color=Species))+geom_point()
View(iris)
myData=iris[,c(1,3,5)]
#step2: split the train and test dataset
training=myData[seq(1,nrow(myData),2),]
testing=myData[seq(2,nrow(myData),2),]
View(iris)
model=train(Species ~.,method="kknn",data=training)
model=train(Species ~.,method="kknn",data=training)
View(model)
model$finalModel
#step4: predict the species
predictedSpecies=predict(mode,testing)
#step4: predict the species
predictedSpecies=predict(model,testing)
#step5: measure accuracy
predictedSpecies[1:4]
testing$Species[1:4]
predictedSpecies==testing$Species
sum(predictedSpecies==testing$Species)
sum(predictedSpecies==testing$Species)/nrows(testing)
sum(predictedSpecies==testing$Species)/nrow(testing)
myData=iris
#step2: split the train and test dataset
training=myData[seq(1,nrow(myData),2),]
testing=myData[seq(2,nrow(myData),2),]
#step3: train the model
model=train(Species ~.,method="kknn",data=training)
model$finalModel
#step4: predict the species
predictedSpecies=predict(model,testing)
#step5: measure accuracy
predictedSpecies[1:4]
testing$Species[1:4]
predictedSpecies==testing$Species
sum(predictedSpecies==testing$Species)/nrow(testing)
View(realEstate)
#Step5: measure accuracy
#MAE
mean(abs(predictedPrices-testing$price))
myData=myData[-which(myData$sq__ft==0),]
# Step2: split to train and test
training=myData[seq(1,nrow(myData),2),]
testing=myData[seq(2,nrow(myData),2),]
# Step3: train the model
set.seed(14)
model=train(price ~.,method='rf',data=training)
# Step4: test the model
predictedPrices=predict(model,testing)
#Step5: measure accuracy
#MAE
mean(abs(predictedPrices-testing$price))
